import astropy.io.fits
import numpy
import pandas
import tqdm


if __name__=="__main__":
    database = astropy.io.fits.open("/Users/tanimoto/software/heasoft/heasoft-6.29/ftools/xstar/data/atdb.fits")
    pointer  = database[1].data[0][0]
    real     = database[2].data[0][0]
    integer  = database[3].data[0][0]
    string   = database[4].data[0][0]

    Electron = {  1: 1,
                  2: 2,   3: 1,
                  4: 3,   5: 2,   6: 1,
                  7: 4,   8: 3,   9: 2,  10: 1,
                 11: 5,  12: 4,  13: 3,  14: 2,  15: 1,
                 16: 6,  17: 5,  18: 4,  19: 3,  20: 2,  21: 1,
                 22: 7,  23: 6,  24: 5,  25: 4,  26: 3,  27: 2,  28: 1,
                 29: 8,  30: 7,  31: 6,  32: 5,  33: 4,  34: 3,  35: 2,  36: 1,
                 37: 9,  38: 8,  39: 7,  40: 6,  41: 5,  42: 4,  43: 3,  44: 2,  45: 1,
                 46:10,  47: 9,  48: 8,  49: 7,  50: 6,  51: 5,  52: 4,  53: 3,  54: 2,  55: 1,
                 56:11,  57:10,  58: 9,  59: 8,  60: 7,  61: 6,  62: 5,  63: 4,  64: 3,  65: 2,  66: 1,
                 67:12,  68:11,  69:10,  70: 9,  71: 8,  72: 7,  73: 6,  74: 5,  75: 4,  76: 3,  77: 2,  78: 1,
                 79:13,  80:12,  81:11,  82:10,  83: 9,  84: 8,  85: 7,  86: 6,  87: 5,  88: 4,  89: 3,  90: 2,  91: 1,
                 92:14,  93:13,  94:12,  95:11,  96:10,  97: 9,  98: 8,  99: 7, 100: 6, 101: 5, 102: 4, 103: 3, 104: 2, 105: 1,
                106:15, 107:14, 108:13, 109:12, 110:11, 111:10, 112: 9, 113: 8, 114: 7, 115: 6, 116: 5, 117: 4, 118: 3, 119: 2, 120: 1,
                121:16, 122:15, 123:14, 124:13, 125:12, 126:11, 127:10, 128: 9, 129: 8, 130: 7, 131: 6, 132: 5, 133: 4, 134: 3, 135: 2, 136: 1,
                137:17, 138:16, 139:15, 140:14, 141:13, 142:12, 143:11, 144:10, 145: 9, 146: 8, 147: 7, 148: 6, 149: 5, 150: 4, 151: 3, 152: 2, 153: 1,
                154:18, 155:17, 156:16, 157:15, 158:14, 159:13, 160:12, 161:11, 162:10, 163: 9, 164: 8, 165: 7, 166: 6, 167: 5, 168: 4, 169: 3, 170: 2, 171: 1,
                172:19, 173:18, 174:17, 175:16, 176:15, 177:14, 178:13, 179:12, 180:11, 181:10, 182: 9, 183: 8, 184: 7, 185: 6, 186: 5, 187: 4, 188: 3, 189: 2, 190: 1,
                191:20, 192:19, 193:18, 194:17, 195:16, 196:15, 197:14, 198:13, 199:12, 200:11, 201:10, 202: 9, 203: 8, 204: 7, 205: 6, 206: 5, 207: 4, 208: 3, 209: 2, 210: 1,
                211:21, 212:20, 213:19, 214:18, 215:17, 216:16, 217:15, 218:14, 219:13, 220:12, 221:11, 222:10, 223: 9, 224: 8, 225: 7, 226: 6, 227: 5, 228: 4, 229: 3, 230: 2, 231: 1,
                232:22, 233:21, 234:20, 235:19, 236:18, 237:17, 238:16, 239:15, 240:14, 241:13, 242:12, 243:11, 244:10, 245: 9, 246: 8, 247: 7, 248: 6, 249: 5, 250: 4, 251: 3, 252: 2, 253: 1,
                254:23, 255:22, 256:21, 257:20, 258:19, 259:18, 260:17, 261:16, 262:15, 263:14, 264:13, 265:12, 266:11, 267:10, 268: 9, 269: 8, 270: 7, 271: 6, 272: 5, 273: 4, 274: 3, 275: 2, 276:1,
                277:24, 278:23, 279:22, 280:21, 281:20, 282:19, 283:18, 284:17, 285:16, 286:15, 287:14, 288:13, 289:12, 290:11, 291:10, 292: 9, 293: 8, 294: 7, 295: 6, 296: 5, 297: 4, 298: 3, 299:2, 300:1,
                301:25, 302:24, 303:23, 304:22, 305:21, 306:20, 307:19, 308:18, 309:17, 310:16, 311:15, 312:14, 313:13, 314:12, 315:11, 316:10, 317: 9, 318: 8, 319: 7, 320: 6, 321: 5, 322: 4, 323:3, 324:2, 325:1,
                326:26, 327:25, 328:24, 329:23, 330:22, 331:21, 332:20, 333:19, 334:18, 335:17, 336:16, 337:15, 338:14, 339:13, 340:12, 341:11, 342:10, 343: 9, 344: 8, 345: 7, 346: 6, 347: 5, 348:4, 349:3, 350:2, 351:1,
                352:27, 353:26, 354:25, 355:24, 356:23, 357:22, 358:21, 359:20, 360:19, 361:18, 362:17, 363:16, 364:15, 365:14, 366:13, 367:12, 368:11, 369:10, 370: 9, 371: 8, 372: 7, 373: 6, 374:5, 375:4, 376:3, 377:2, 378:1,
                379:28, 380:27, 381:26, 382:25, 383:24, 384:23, 385:22, 386:21, 387:20, 388:19, 389:18, 390:17, 391:16, 392:15, 393:14, 394:13, 395:12, 396:11, 397:10, 398: 9, 399: 8, 400: 7, 401:6, 402:5, 403:4, 404:3, 405:2, 406:1,
                407:29, 408:28, 409:27, 410:26, 411:25, 412:24, 413:23, 414:22, 415:21, 416:20, 417:19, 418:18, 419:17, 420:16, 421:15, 422:14, 423:13, 424:12, 425:11, 426:10, 427: 9, 428: 8, 429:7, 430:6, 431:5, 432:4, 433:3, 434:2, 435:1,
                436:30, 437:29, 438:28, 439:27, 440:26, 441:25, 442:24, 443:23, 444:22, 445:21, 446:20, 447:19, 448:18, 449:17, 450:16, 451:15, 452:14, 453:13, 454:12, 455:11, 456:10, 457: 9, 458:8, 459:7, 460:6, 461:5, 462:4, 463:3, 464:2, 465:1}

    Z           = []
    Lower_Ion   = []
    Lower_Level = []
    Upper_Ion   = []
    Upper_Level = []
    N           = []
    L           = []
    S           = []
    Energy      = []
    Cross       = []

    for i in range(len(pointer)//10):
        if pointer[10*i+1]==70 or pointer[10*i+1]==99:
            nd = integer[pointer[10*i+8]-1]
            nt = integer[pointer[10*i+8]+0]
            nx = integer[pointer[10*i+8]+1]

            for j in range(nx):
                if integer[pointer[10*i+8]+7]==0:
                    Z.append(integer[pointer[10*i+8]+5])
                else:
                    Z.append(int(-1+numpy.sqrt(1+8*integer[pointer[10*i+8]+9]+8*Electron[integer[pointer[10*i+8]+9]]-8))//2)
                Lower_Ion.append(integer[pointer[10*i+8]+9])
                Lower_Level.append(integer[pointer[10*i+8]+8])
                Upper_Ion.append(integer[pointer[10*i+8]+7])
                Upper_Level.append(integer[pointer[10*i+8]+6])
                N.append(integer[pointer[10*i+8]+2])
                L.append(integer[pointer[10*i+8]+3])
                S.append(integer[pointer[10*i+8]+4])
                Energy.append("{0:.4e}".format(13.605*real[pointer[10*i+7]+nd+nt+nd*nt+2*j-1]))
                Cross.append("{0:.4e}".format(real[pointer[10*i+7]+nd+nt+nd*nt+2*j+0]))

    df = pandas.DataFrame(data={"Z": Z, "Lower_Ion": Lower_Ion, "Lower Level": Lower_Level, "Upper_Ion": Upper_Ion, "Upper Level": Upper_Level, "N": N, "L": L, "2S+1": S, "Energy (eV)": Energy, "Cross Section (Mb)": Cross})
    df = df.sort_values(["Z", "Lower_Ion"])
    df = df.reset_index(drop=True)
    df.to_html("sample.html")